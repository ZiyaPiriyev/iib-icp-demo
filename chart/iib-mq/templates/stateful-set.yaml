# Â© Copyright IBM Corporation 2017
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  serviceName: {{ .Values.service.name }}
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        QM_IDENTIFIER: "{{ .Release.Name }}"
    spec:
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
      - name: iib-mq
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 1414
        - containerPort: 9443
        - containerPort: 4414
        - containerPort: 7080
        - containerPort: 7800
        env:
        - name: LICENSE
          value: {{ .Values.license }}
        - name: NODE_NAME
          value: {{ .Values.iib.iibnodename }}
        - name: SERVER_NAME
          value: {{ .Values.iib.iibservername }}
        - name: CACHE_POLICY
          value: "/tmp/globalcache-policy/globalcache_policy.xml"
        - name: CACHE_PORT_RANGE
          value: "2800-2819"
        - name: MQ_QMGR_NAME
          value: {{ .Values.queueManager.name | default .Release.Name | replace "-" "" }}
        #- name: MQ_DISABLE_WEB_CONSOLE
        #  value: "true"
        - name: MQ_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: adminPassword
        {{- if .Values.queueManager.dev.appPassword }}
        - name: MQ_APP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: appPassword
        {{- end }}
        {{- if .Values.persistence.enabled }}
        volumeMounts:
        - mountPath: "/mnt/mqm"
          name: "{{ template "fullname" . }}-{{ .Values.dataPVC.name }}"
        {{- end }}
        - mountPath: "/tmp/BARs"
          name: bars
        - mountPath: /tmp/globalcache-policy
          name: globalcache-policy
        resources:
          limits:          
{{ toYaml .Values.resources.limits | indent 12 }}
          requests:
{{ toYaml .Values.resources.requests | indent 12 }}
#         readinessProbe:
#           failureThreshold: 3
#           httpGet:
#             path: /
#             port: 4414
#             scheme: HTTP
#           initialDelaySeconds: 15
#           periodSeconds: 10
#           successThreshold: 1
#           timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          tcpSocket:
            port: 7800
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        livenessProbe:
          httpGet:
            path: /
            port: 4414
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
      volumes:
      - name: globalcache-policy
        configMap:
          name: {{ .Values.iib.cache.configmap }}
      - name: bars
        persistentVolumeClaim:
          claimName: {{ .Values.iib.pvc }}
  volumeClaimTemplates:
  {{- if .Values.persistence.enabled }}
  - metadata:
      name: "{{ template "fullname" . }}-{{ .Values.dataPVC.name }}"
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      {{- if .Values.persistence.useDynamicProvisioning }}
      # If present, use the storageClassName from the values.yaml, else use the
      # default storageClass setup by Kubernetes Administrator
      #
      # Setting storageClassName to nil means use the default storage class
      storageClassName: {{ default nil .Values.dataPVC.storageClassName | quote }}
      {{- else }}
      # Disable dynamic provisioning
      storageClassName: ""
      {{- end }}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.dataPVC.size | quote }}
  {{- end }}

